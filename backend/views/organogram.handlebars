<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Organograma - {{company.name}}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <style>
      :root {
        color-scheme: light;
      }
      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }
      body {
        margin: 0;
        font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        color: #0f172a;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        {{company.theme_style}}
      }
      header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 1.5rem;
        padding: 2rem 3rem;
        background-color: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(12px);
        border-bottom: 1px solid rgba(148, 163, 184, 0.3);
      }
      .brand {
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      .brand img {
        width: 72px;
        height: 72px;
        border-radius: 20px;
        object-fit: cover;
        box-shadow: 0 18px 30px -12px rgba(15, 23, 42, 0.3);
      }
      .brand h1 {
        margin: 0;
        font-size: clamp(1.75rem, 2vw + 1rem, 2.5rem);
      }
      .company-description {
        max-width: 520px;
        color: #334155;
        line-height: 1.5;
      }
      .actions {
        display: flex;
        align-items: center;
        gap: 0.75rem;
      }
      button.export {
        background: #0ea5e9;
        color: #fff;
        border: none;
        border-radius: 999px;
        padding: 0.8rem 1.6rem;
        font-weight: 600;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 12px 30px -14px rgba(14, 165, 233, 0.8);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }
      button.export:hover {
        transform: translateY(-1px);
        box-shadow: 0 14px 34px -16px rgba(14, 165, 233, 0.9);
      }
      main {
        flex: 1;
        padding: 2rem clamp(1.25rem, 5vw, 4rem) 4rem;
        overflow-x: auto;
      }
      .organogram {
        width: max-content;
        min-width: 100%;
        display: flex;
        justify-content: center;
      }
      .tree {
        position: relative;
        display: inline-block;
        padding: 2rem 0;
      }
      .tree ul {
        position: relative;
        padding-top: 2rem;
        padding-left: 0;
        text-align: center;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 2rem;
      }
      .tree li {
        list-style-type: none;
        position: relative;
        padding: 2rem 1rem 0 1rem;
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      .tree li::before,
      .tree li::after {
        content: '';
        position: absolute;
        top: 0;
        border-top: 2px solid rgba(100, 116, 139, 0.3);
        width: 50%;
        height: 2rem;
      }
      .tree li::before {
        right: 50%;
      }
      .tree li::after {
        left: 50%;
        border-left: 2px solid rgba(100, 116, 139, 0.3);
      }
      .tree li:only-child::before,
      .tree li:only-child::after {
        display: none;
      }
      .tree li:only-child {
        padding-top: 0;
      }
      .tree li:first-child::before,
      .tree li:last-child::after {
        border: none;
      }
      .tree li:last-child::before {
        border-right: 2px solid rgba(100, 116, 139, 0.3);
        border-radius: 0 0 0.75rem 0;
      }
      .tree li:first-child::after {
        border-radius: 0 0 0 0.75rem;
      }
      .tree li > ul::before {
        content: '';
        position: absolute;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        border-left: 2px solid rgba(100, 116, 139, 0.3);
        height: 2rem;
      }
      .employee-card {
        width: min(280px, 70vw);
        background: rgba(255, 255, 255, 0.92);
        border-radius: 20px;
        padding: 1.4rem;
        box-shadow: 0 32px 70px -40px rgba(15, 23, 42, 0.6);
        backdrop-filter: blur(12px);
        text-align: center;
        position: relative;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }
      .employee-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 40px 90px -50px rgba(14, 116, 144, 0.7);
      }
      .employee-card img {
        width: 96px;
        height: 96px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 1rem;
        border: 4px solid rgba(14, 165, 233, 0.2);
        box-shadow: 0 16px 40px -28px rgba(14, 165, 233, 0.7);
      }
      .employee-card h3 {
        margin: 0;
        font-size: 1.15rem;
        font-weight: 600;
      }
      .employee-card p {
        margin: 0.35rem 0 0;
        color: #475569;
        font-size: 0.95rem;
      }
      .tooltip {
        position: fixed;
        pointer-events: none;
        background: rgba(15, 23, 42, 0.92);
        color: #e2e8f0;
        padding: 0.75rem 1rem;
        border-radius: 12px;
        font-size: 0.85rem;
        line-height: 1.4;
        box-shadow: 0 18px 35px -22px rgba(15, 23, 42, 0.8);
        opacity: 0;
        transform: translateY(4px);
        transition: opacity 0.15s ease, transform 0.15s ease;
        z-index: 1000;
        max-width: 260px;
      }
      .tooltip.visible {
        opacity: 1;
        transform: translateY(0);
      }
      @media (max-width: 768px) {
        header {
          flex-direction: column;
          align-items: flex-start;
          padding: 1.5rem 1.5rem 1rem;
          gap: 1rem;
        }
        .actions {
          align-self: stretch;
          justify-content: flex-end;
        }
        main {
          padding: 1.5rem 1rem 3rem;
        }
        .tree ul {
          gap: 1rem;
        }
        .tree li {
          padding: 1.5rem 0.5rem 0 0.5rem;
        }
      }
    </style>
  </head>
  <body>
    <header>
      <div class="brand">
        {{#if company.logo_public_path}}
          <img src="{{company.logo_public_path}}" alt="Logo {{company.name}}" />
        {{/if}}
        <div>
          <h1>{{company.name}}</h1>
          {{#if company.cnpj}}
            <p style="margin: 0; color: #64748b; font-weight: 500;">CNPJ: {{company.cnpj}}</p>
          {{/if}}
        </div>
      </div>
      {{#if company.description}}
        <p class="company-description">{{company.description}}</p>
      {{/if}}
      <div class="actions">
        <button id="export-pdf" class="export" type="button">Exportar PDF</button>
        <button id="export-image" class="export" type="button" style="background: #22c55e; box-shadow: 0 12px 30px -14px rgba(34, 197, 94, 0.7);">Exportar Imagem</button>
      </div>
    </header>
    <main>
      <section class="organogram" id="organogram">
        <div class="tree" id="tree"></div>
      </section>
    </main>
    <div class="tooltip" id="tooltip"></div>

    <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js"></script>
    <script>
      const rawNodes = {{{nodes}}};

      const buildHierarchy = (nodes) => {
        const lookup = new Map();
        nodes.forEach((node) => {
          lookup.set(node.id, { ...node, children: [] });
        });
        const roots = [];
        lookup.forEach((node) => {
          if (node.pid && lookup.has(node.pid)) {
            lookup.get(node.pid).children.push(node);
          } else {
            roots.push(node);
          }
        });
        return roots;
      };

      const createCard = (node) => {
        const card = document.createElement('div');
        card.className = 'employee-card';
        card.dataset.name = node.name || '';
        card.dataset.role = node.title || '';
        card.dataset.email = node.email || '';
        card.dataset.department = node.department || '';
        card.dataset.phone = node.phone || '';

        if (node.img) {
          const img = document.createElement('img');
          img.src = node.img;
          img.alt = `Foto de ${node.name}`;
          card.appendChild(img);
        }
        const nameEl = document.createElement('h3');
        nameEl.textContent = node.name;
        card.appendChild(nameEl);
        const roleEl = document.createElement('p');
        roleEl.textContent = node.title;
        card.appendChild(roleEl);
        return card;
      };

      const renderNode = (node) => {
        const li = document.createElement('li');
        li.appendChild(createCard(node));
        if (node.children && node.children.length > 0) {
          const ul = document.createElement('ul');
          node.children.forEach((child) => {
            ul.appendChild(renderNode(child));
          });
          li.appendChild(ul);
        }
        return li;
      };

      const renderTree = (roots) => {
        const container = document.getElementById('tree');
        container.innerHTML = '';
        const topLevel = document.createElement('ul');
        roots.forEach((root) => {
          topLevel.appendChild(renderNode(root));
        });
        container.appendChild(topLevel);
      };

      const tooltip = document.getElementById('tooltip');

      document.addEventListener('mousemove', (event) => {
        if (!tooltip.classList.contains('visible')) return;
        tooltip.style.left = `${event.clientX + 16}px`;
        tooltip.style.top = `${event.clientY + 16}px`;
      });

      document.addEventListener('mouseover', (event) => {
        const card = event.target.closest('.employee-card');
        if (!card) {
          tooltip.classList.remove('visible');
          return;
        }
        const lines = [];
        if (card.dataset.email) lines.push(`<strong>Email:</strong> ${card.dataset.email}`);
        if (card.dataset.department) lines.push(`<strong>Departamento:</strong> ${card.dataset.department}`);
        if (card.dataset.phone) lines.push(`<strong>Telefone:</strong> ${card.dataset.phone}`);
        if (lines.length > 0) {
          tooltip.innerHTML = lines.join('<br />');
          tooltip.classList.add('visible');
        }
      });

      document.addEventListener('mouseout', (event) => {
        if (event.relatedTarget && event.relatedTarget.closest && event.relatedTarget.closest('.employee-card')) {
          return;
        }
        tooltip.classList.remove('visible');
      });

      const roots = buildHierarchy(rawNodes);
      if (roots.length === 0) {
        const container = document.getElementById('tree');
        container.innerHTML = '<p style="background: rgba(255,255,255,0.85); padding: 1.5rem 2rem; border-radius: 18px; box-shadow: 0 24px 50px -40px rgba(15,23,42,0.6);">Cadastre colaboradores para visualizar o organograma.</p>';
      } else {
        renderTree(roots);
      }

      const exportAsImage = async () => {
        const section = document.getElementById('organogram');
        const canvas = await html2canvas(section, { backgroundColor: null, scale: 2 });
        const link = document.createElement('a');
        link.download = `organograma-{{company.slug}}.png`;
        link.href = canvas.toDataURL('image/png');
        link.click();
      };

      const exportAsPDF = async () => {
        const section = document.getElementById('organogram');
        const canvas = await html2canvas(section, { backgroundColor: '#ffffff', scale: 2 });
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jspdf.jsPDF({ orientation: 'landscape', unit: 'pt', format: 'a4' });
        const pageWidth = pdf.internal.pageSize.getWidth();
        const pageHeight = pdf.internal.pageSize.getHeight();
        const ratio = Math.min(pageWidth / canvas.width, pageHeight / canvas.height);
        const imgWidth = canvas.width * ratio;
        const imgHeight = canvas.height * ratio;
        pdf.addImage(imgData, 'PNG', (pageWidth - imgWidth) / 2, 24, imgWidth, imgHeight);
        pdf.save(`organograma-{{company.slug}}.pdf`);
      };

      document.getElementById('export-image').addEventListener('click', exportAsImage);
      document.getElementById('export-pdf').addEventListener('click', exportAsPDF);
    </script>
  </body>
</html>
